{
    "collab_server" : "",
    "contents" : "\n\nlibrary(shiny)\n## library(DT)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(plyr)\nlibrary(gridExtra)\nlibrary(grid)\n## TODO Use interactive charts ?\n## library(plotly)\n\n## Run once when the app is launched\n\n## Options de debuggage\noptions(shiny.trace=FALSE)\n\n## Load database IP\nsource('ReadIP.R', local = TRUE)\ndata <- ReadIP('data.csv')\n# print(\"######################### READ FINISHED#################################\")\n\n###################################### FONCTIONS ##########################################\n\n## Rename sum function for addmargins\nTotal <- function(x) sum(x)\n\n#on crée une fonction pourcentage afin de faciliter le calcule de pourcentage\npourcentage<- function(tableau, sub){\n  pr<- round((nrow(sub)*100)/nrow(tableau), digits = 2)\n  return(pr)\n}\n\n## \nGetPercentLabels2 <-function(val, digits = 0){\n  pr<- paste(round(val, digits), \"%\")\n  return(pr)\n}\n\n## Compute percentage labels of bar plots\nGetPercentLabels <- function(x, threshold = 1, digits = 1) {\n  ind <- x >= threshold\n  r <- rep(\"\", length(x))\n  r[ind] <- sprintf(paste0(\"%.\", digits, \"f%%\"), x[ind])\n  return(r)\n}\n\n## x compris en 0 et 1. Transforme x en un pourcentage en 0 et 100.\nToHundredPercent <- function(x){\n  ans <- x\n  if(x < 1 && x >= 0){\n    ans <- x * 100\n  }\n  return(ans)\n}\n\n## http://stackoverflow.com/questions/21236229/stacked-bar-chart\n## http://rstudio-pubs-static.s3.amazonaws.com/4305_8df3611f69fa48c2ba6bbca9a8367895.html\n## http://www.sthda.com/french/wiki/ggplot2-barplots-guide-de-demarrage-rapide-logiciel-r-et-visualisation-de-donnees\nBarPlot <- function(x, threshold = 5, digits = 0) {\n  x <- as.data.frame(table(x[drop=TRUE], useNA = \"ifany\"))\n  x$label <- GetPercentLabels(100*x$Freq/sum(x$Freq), threshold, digits)\n  pos <- x$Freq / 2\n  ggplot(x, aes(x = Var1, y = Freq)) + geom_bar(stat=\"identity\", position=\"dodge\", fill = ptol_pal()(1)) + coord_flip() + geom_text(aes(y = pos, label=label), color = \"white\", size=6) +  theme_gdocs() \n}\n\nBarStackedPlot2 <- function(df, aesX, aesF, legend.title = NULL, labelX = TRUE, labelF = TRUE) {\n  x <- as.data.frame(ftable(df[ , c(aesX, aesF), drop=TRUE]))\n  totFreq <- sum(x$Freq)\n  ## Percentage label\n  x$percentage <- 100 * x$Freq / totFreq\n  x$percentage <-  GetPercentLabels(x$percentage, threshold = 2, digits = 0)\n  x <- ddply(x, aesX, transform, pos = cumsum(Freq) - (0.5 * Freq), top = cumsum(Freq))\n  x$toplab <-  GetPercentLabels(100 * x$top / totFreq, threshold = 0)\n  m <- length(unique(x[,aesF]))\n  ## exploit recycling\n  x$toplab[ append(rep(TRUE,m-1), FALSE) ] <- \"\" \n\n    p <- ggplot(x, aes_string(x = aesX, y = \"Freq\", fill = aesF)) + geom_bar(stat=\"identity\") + coord_flip() + theme_gdocs()\n  \n  if(labelF) {\n    p <- p + geom_text(aes(y = pos, label = x$percentage, size = 6, position = \"stack\"), show.legend = FALSE)\n  }\n  \n  if(labelX) {\n    p <- p + geom_text(aes(y = x$top, label = x$toplab, size = 6, hjust = -0.25, vjust = -0.5, position = \"stack\", fontface = 2), show.legend = FALSE) + expand_limits( y = c(0,round(max(x$top)*1.05)))\n  }\n  \n  if(is.null(legend.title)) {\n    p <- p + scale_fill_ptol()\n  } else {\n    p <- p + scale_fill_ptol(name=legend.title) \n  }\n  p <- p + theme(legend.position=\"bottom\", legend.direction=\"horizontal\")\n\n  return(p)\n}\n\nsalaireBrut<-function(salaireNet){\n  salaire<-salaireNet*1.299\n  return(salaire)\n}\n\n########################################################################################################\n########################################################################################################\n\n\n## TEAM STRANGE\n## Calul pour le graph situation de l'emploi\n##\nsituationEmploi <- data$situationProN30 == \"En emploi \"\nsexe <- data$sexe\n\ntab<-table(situationEmploi, sexe)\ndas<-data.frame(tab/sum(tab))\ndas$Freq <- round(das$Freq,2)\n\n## Calcul Pour la progression des conditions d'emplois\n## Data frame avec l'ensemble des donnees\n\n\nuniversiteTemp <- data.frame(data$situationProN30,\n                         data$statutEmploiN30,\n                         data$statutEmploiN18,\n                         data$niveauEmploiN30,\n                         data$tempsTravail2015,\n                         data$situationProN18,\n                         data$niveauEmploiN18,\n                         data$tempsTravail2014,\n                         data$sexe,\n                         data$departements,\n                         data$salaireMensuel,\n                         data$salaireMensuel2014,\n                         data$boursier,\n                         data$codeDiplome,\n                         data$etudeN6,\n                         data$etudeN18\n                         )\nuniversite <- setNames(universiteTemp,c(\"situationProN30\",\n                            \"statutEmploiN30\",\n                            \"statutEmploiN18\",\n                            \"niveauEmploiN30\",\n                            \"tempsTravail2015\",\n                            \"situationProN18\",\n                            \"niveauEmploiN18\",\n                            \"tempsTravail2014\",\n                            \"sexe\",\n                            \"departements\",\n                            \"salaireMensuel\",\n                            \"salaireMensuel2014\",\n                            \"boursier\",\n                            \"codeDiplome\",\n                            \"etudeN6\",\n                            \"etudeN18\"))\n\nDATA_SIZE <- nrow((universite))\n# print(\"universite size : \")\n# print(DATA_SIZE)\n\n# print(\"############str(universite)#############\")\n# str(universite)\n##On utilise subset afin de filtrer les données et travailler sur ceux\n##qui ont un emploi\n# print(\"############str(data)#############\")\n# str(data)\n# print(\"############str(data$situationProN30)#############\")\n# str(data$situationProN30)\ninsertion<-subset(universite, situationProN30 == \"En emploi \")\n# print(\"############str(insertion)#############\")\n# str(insertion)\n# print(\"############colnames(insertion)#############\")\n# print(colnames(insertion))\n# print(\"############nrow(insertion)#############\")\n# nrow(insertion)\ninsertion2<-subset(universite, situationProN18 ==  \"En emploi \")\n# print(\"############str(insertion2)#############\")\n# str(insertion2)\nstable<-subset(insertion, statutEmploiN30 == \"Prof. libérale, indépendant,\\n chef d’entreprise, auto-entrepreneur\" | statutEmploiN30 == \"Fonctionnaire\\n(y compris fonctionnaire stagiaire ou élève fonctionnaire)\" | statutEmploiN30 == \"CDI\")\n# print(\"############str(stable)#############\")\n# str(stable)\nstable2<-subset(insertion2, statutEmploiN18 == \"Prof. libérale, indépendant,\\n chef d’entreprise, auto-entrepreneur\" | statutEmploiN18 == \"Fonctionnaire\\n(y compris fonctionnaire stagiaire ou élève fonctionnaire)\" | statutEmploiN18 == \"CDI\")\n# print(\"############str(stable2)#############\")\n# str(stable2)\nniveauEmploi<-subset(insertion, niveauEmploiN30 == \"ingénieur, cadre, professions libérales, professions intellectuelles supérieures\" | niveauEmploiN30 == \"emploi de niveau intermédiaire : technicien, agent de maîtrise, maîtrise administrative et commerciale, VRP\")\n# print(\"############str(niveauEmploi)#############\")\n# str(niveauEmploi)\nniveauEmploi2<-subset(insertion2, niveauEmploiN18 == \"ingénieur, cadre, professions libérales, professions intellectuelles supérieures\" | niveauEmploiN18 == \"emploi de niveau intermédiaire : technicien, agent de maîtrise, maîtrise administrative et commerciale, VRP\")\n# print(\"############str(niveauEmploi2)#############\")\n# str(niveauEmploi2)\ntempsPlein<-subset(insertion, tempsTravail2015 == \"temps plein\")\n# print(\"############str(tempsPlein)#############\")\n# str(tempsPlein)\n# print(\"############str(tempsPlein$salaireMensuel)#############\")\n# str(tempsPlein$salaireMensuel)\ntempsPlein2<-subset(insertion2, tempsTravail2015 == \"temps plein\")\n# print(\"############str(tempsPlein2)#############\")\n# str(tempsPlein2)\n\n# print(\"############str(insertion$boursier)#############\")\n# str(insertion$boursier)\nboursierAvecEmploi <- subset(insertion, boursier == \"Oui\")\n# print(\"############str(boursierAvecEmploi)#############\")\n# str(boursierAvecEmploi)\nnonBoursierAvecEmploi <- subset(insertion, boursier == \"Non\")\n# print(\"############str(nonBoursierAvecEmploi)#############\")\n# str(nonBoursierAvecEmploi)\n\nsansEmploi <- subset(\n  universite,\n  situationProN18 ==  \"En recherche d'emploi\" | situationProN18 == \"Ne recherche pas d'emploi\")\n# print(\"############str(sansEmploi)#############\")\n# str(sansEmploi)\n\nboursierSansEmploi <- subset(sansEmploi, boursier == \"Oui\")\n# print(\"############str(boursierSansEmploi)#############\")\n# str(boursierSansEmploi)\n\n######### TEAM STRANGE #############\n## La bourse a t elle faciliter l'obtention du diplome\na<-c(1,1,2,2)\nb<-c(pourcentage(insertion, boursierAvecEmploi),\n     100 - pourcentage(insertion, boursierAvecEmploi),\n     pourcentage(universite, boursierSansEmploi),\n     100 - pourcentage(universite, boursierSansEmploi))\nc<-c(\"boursier\", \"non boursier\", \"boursier\", \"non boursier\")\ndfBoursier<-data.frame(a,b,c)\ncolnames(dfBoursier)<-c(\"x\", \"y\", \"fill\")\ndfBoursier$xLabel<-ifelse(dfBoursier$x == 1, \"Possède un emploi\", \"Ne possède pas d'emploi\")\ndfBoursier$freq<-GetPercentLabels(dfBoursier$y)\n# print(\"############str(dfBoursier)#############\")\n# str(dfBoursier)\n\nsalBrut<-with(tempsPlein, tempsPlein$salaireMensuel) # On recupère uniquement la colonne des salaire net \n# print(\"############print(salBrut))#############\")\n# print(salBrut)\nsalBrutNumeric <- as.numeric(salBrut) # parce que ce sont des facteurs\nsalBrut<-salaireBrut(salBrutNumeric * 12) #on applique la fonciton de transformation en salaire brut\n# print(\"############print(salBrut) après fonction salaireBrut()#############\")\n# print(salBrut)\n\nsalBrut30<-salaireBrut(as.numeric(with(tempsPlein2, tempsPlein2$salaireMensuel2014)) * 12) # code du haut en imbriqué (30 mois)\n# print(\"############print(salBrut30)#############\")\n# print(salBrut30)\n\n\n###################################\n## \nx<-c(1, 1, 1, 2, 2, 2)\ny<-c(pourcentage(insertion, stable),\n     pourcentage(insertion, tempsPlein),\n     pourcentage(insertion, niveauEmploi),\n     pourcentage(insertion2, stable2),\n     pourcentage(insertion2, tempsPlein2),\n     pourcentage(insertion2, niveauEmploi2))\nfill<-c(\"Emploi stable\",\"Emploi à temps plein\",\"Emploi cadre ou intermédiaires\",\"Emploi stable\",\"Emploi à temps plein\",\"Emploi cadre ou intermédiaires\")\ndfPlot<-data.frame(x,y,fill)\ndfPlot$date<-ifelse(dfPlot$x == 1, \"18 mois après le diplome\", \"30 mois après le diplome\")\ndfPlot$freq<-GetPercentLabels2(dfPlot$y)\n\n###################################\n## Lieu de l'emlois\nalpesMaritimes <- subset(insertion, departements == \"Alpes-Maritimes\")\nalpesMaritimes <- alpesMaritimes[\"departements\"]\nalpesMaritimes <- length(alpesMaritimes$departements)\n\npacaHORSAlpesMaritimes <- subset(insertion, departements == \"Bouches-du-Rhône\" | departements == \"Vaucluse\" | departements == \"Drôme\" | departements == \"Var\" | departements == \"Alpes-de-Haute-Provence\" | departements == \"Hautes-Alpes\")\npacaHORSAlpesMaritimes <- pacaHORSAlpesMaritimes[\"departements\"]\npacaHORSAlpesMaritimes <- length(pacaHORSAlpesMaritimes$departements)\n\nHORSpaca <- subset(insertion, departements != \"Bouches-du-Rhône\" | departements != \"Vaucluse\" | departements != \"Drôme\" | departements != \"Var\" | departements != \"Alpes-de-Haute-Provence\" | departements != \"Hautes-Alpes\")\nHORSpaca <- subset(HORSpaca, departements != \"Alpes-Maritimes\")\nHORSpaca <- length(HORSpaca$departements)\n# print(\"######### HERE #########\")\n# print(HORSpaca)\n\n\nSIZE_INSERTION <- na.omit(insertion[\"departements\"])\nSIZE_INSERTION <- length(SIZE_INSERTION$departements)\n# print(SIZE_INSERTION)\n\n# print(\"########### HERE ###########\")\n# print(ToHundredPercent(alpesMaritimes / SIZE_INSERTION))\n# print(ToHundredPercent(pacaHORSAlpesMaritimes / SIZE_INSERTION))\n# print(HORSpaca / SIZE_INSERTION)\n# print(ToHundredPercent(HORSpaca / SIZE_INSERTION))\n\nx <- c(\"alpes-maritimes\", \"paca hors alpes-maritimes\", \"hors paca\")\ny <- (c(\n  ToHundredPercent(alpesMaritimes / SIZE_INSERTION),\n  ToHundredPercent(pacaHORSAlpesMaritimes / SIZE_INSERTION),\n  ToHundredPercent(HORSpaca / SIZE_INSERTION)))\nlieuEmplois <- data.frame(x, y)\nprint(\"######## HERE ##########\")\nprint(lieuEmplois)\n\n## Possible choices for the dynamic UI\nchoices.annee <- sort(unique(data$annee))\nchoices.grade <- sort(unique(data$libdip1))\nchoices.diplome <- list(\"Mention\" = sort(unique(data$libdip2)), \"Spécialité\" = sort(unique(data$libdip3)), \"Code SISE\" = sort(unique(data$code_diplome)))\n\n############ TODO ################\n## Intégrer le code_diplome dans ReadIP\n## du variable code_diplome, sur 7 caractères : exemple : 2215128\n\n## Type de diplome possedant un emploi en master et LicencePro\nemploiMaster<-subset(insertion, codeDiplome == \"Master\")\n# print(\"############str(emploiMaster)#############\")\n# str(emploiMaster)\nemploiLicencePro<- subset(insertion, codeDiplome == \"LicencePro\")\n# print(\"############str(emploiLicencePro)#############\")\n# str(emploiLicencePro)\n\nx<-c(\"Master\",\"Licence Pro\")\ny<-(c(\n  pourcentage(insertion, emploiMaster),\n  pourcentage(insertion, emploiLicencePro)))\nne<- data.frame(x,y)\n# print(\"############str(ne)#############\")\n# str(ne)\n\n##############\n## Evolution de la poursuite d'études ######\n\n## Type de diplome avec ou sans emplois avec Master ou LicencePro\ndiplomeMaster <- subset(universite, codeDiplome == \"Master\")\n# print(\"############str(diplomeMaster)#############\")\n# str(diplomeMaster)\ndiplomeLicencePro <- subset(universite, codeDiplome == \"LicencePro\")\n# print(\"############str(diplomeLicencePro)#############\")\n# str(diplomeLicencePro)\n\n## Fais des études en master en 2013-2014\npoursuiteMaster <-subset(diplomeMaster, etudeN6 != \"Non\")\n# print(\"############str(poursuiteMaster)#############\")\n# str(poursuiteMaster)\n## Fais des études en master en 2014-2015\npoursuiteMaster2 <-subset(diplomeMaster, etudeN18 != \"Non\") \n# print(\"############str(poursuiteMaster2)#############\")\n# str(poursuiteMaster2)\n\n## Fais des études en LicencePro en 2013-2014\npoursuiteLic <-subset(diplomeLicencePro, etudeN6 != \"Non\")\n# print(\"############str(poursuiteLic)#############\")\n# str(poursuiteLic)\n## Fais des études en LicencePro en 2014-2015\npoursuiteLic2 <-subset(diplomeLicencePro, etudeN18 != \"Non\")\n# print(\"############str(poursuiteLic2)#############\")\n# str(poursuiteLic2)\n\na<-c(1,1,2,2)\nb<-c(pourcentage(diplomeMaster, poursuiteMaster),\n     pourcentage(diplomeMaster, poursuiteMaster2),\n     pourcentage(diplomeLicencePro, poursuiteLic),\n     pourcentage(diplomeLicencePro, poursuiteLic2))\nc<-c(\"2013-2014\",\"2014-2015\",\"2013-2014\", \"2014-2015\")\npoursuiteDF<-data.frame(a,b,c)\npoursuiteDF$labelX<-ifelse(poursuiteDF$a ==1, \"Master\", \"Licence Pro\")\npoursuiteDF$labelY<-GetPercentLabels(poursuiteDF$b)\n# print(poursuiteDF)\n\n\n######### Poursuite d'études à 18 mois###############\n#####################################################\nuniversite$insertionDixHuitsMois <-ifelse(universite$situationProN18 == \"En emploi \", \"oui\", \"non\")\n# print(\"############str(insertionDixHuitsMois)#############\")\n# str(universite$insertionDixHuitsMois)\n\nuniversiteToPlot <- na.omit(universite[c(\"insertionDixHuitsMois\", \"sexe\")])\n# print(\"############str(universiteToPlot)#############\")\n# str(universiteToPlot)\n# print(\"############head(universiteToPlot)#############\")\n# print(head(universiteToPlot))\n\ninsertionDixHuitsMoisToPlot <- na.omit(universite$insertionDixHuitsMois)\n# print(\"############str(insertionDixHuitsMoisToPlot)#############\")\n# str(insertionDixHuitsMoisToPlot)\n\nsexeToPlot <- na.omit(universiteToPlot$sexe)\n# print(\"############length(sexeToPlot)#############\")\n# print(length(sexeToPlot))\n\n######### Poursuite d'études à 30 mois ##############\n#####################################################\nuniversite$insertionTrenteMois <-ifelse(universite$situationProN30 == \"En emploi \", \"oui\", \"non\")\n# print(\"############str(insertionTrenteMois)#############\")\n# str(universite$insertionTrenteMois)\n\nuniversiteToPlotTrenteMois <- na.omit(universite[c(\"insertionTrenteMois\", \"sexe\")])\n# print(\"############str(universiteToPlotTrenteMois)#############\")\n# str(universiteToPlotTrenteMois)\n# print(\"############head(universiteToPlotTrenteMois)#############\")\n# print(head(universiteToPlotTrenteMois))\n\ninsertionTrenteMoisToPlot <- na.omit(universite$insertionTrenteMois)\n# print(\"############str(insertionTrenteMoisToPlot)#############\")\n# str(insertionTrenteMoisToPlot)\n\nsexeToPlotTrenteMois <- na.omit(universiteToPlotTrenteMois$sexe)\n# print(\"############length(sexeToPlotTrenteMois)#############\")\n# print(length(sexeToPlotTrenteMois))\n \n## https://gist.github.com/jimhester/18b9116a415633e5a73d\n## IDEA https://rstudio.github.io/shinythemes/\nshinyServer(\n  ## Define server logic \n  function(input, output, session) {\n    ## Run once each time a user visits the app\n    \n    # output$Debug <- renderPrint({\n    #   \"Pourcentage 18:\"\n    #   str(pourcentage18)\n    #   \"Pourcentage 30:\"\n    #   str(pourcentage30)\n    # })\n\n    ## ####################################\n    ## Generate dynamic UI (not reactive)\n    output$checkboxAnnee <- renderUI( {\n      checkboxGroupInput(\"annee\", \"Année(s)\", choices.annee, choices.annee)\n    })\n    \n    output$checkboxGrade <- renderUI( {\n      checkboxGroupInput(\"grade\", \"Grade(s)\", choices.grade, choices.grade)\n    })\n    \n    output$selectizeDiplome <- renderUI( {\n      selectizeInput(\n        'diplome', 'Sélectionner une ou plusieurs mentions, spécialités ou codes SISE : ', choices.diplome, multiple = TRUE, \n        options = list(\n          placeholder = \"Taper la sélection ici.\",\n          onInitialize = I('function() { this.setValue(\"\"); }')\n        ), width = \"800px\"\n      )\n    })\n    ## ###########\n    ## BEGIN DEBUG\n    ## output$annee <- renderPrint({ input$annee })\n    ## output$grade <- renderPrint({ input$grade })\n    ## output$diplome <- renderPrint({ input$diplome })\n    ## output$sexe <- renderPrint({ input$sexe })\n    ## END DEBUG\n\n    #######################################\n    ## Sequential reactive updates\n    ## recompute widgets in a fixed order (grade, sexe, diplome).\n    ## TODO Watch if the selection is reduced or extended and react properly\n    ## Memorize the previous length of the selection\n    rdataA <- reactive( {\n      ##  It is \"reactive\" and therefore should be automatically\n      ##  re-executed when inputs change\n      rdataA <- data\n      if( length(input$annee) < length(choices.annee) ) {\n        ## Sélection active : certains grades ne sont pas sélectionnés.\n        rdataA <- rdataA[ rdataA$annee %in% input$annee, ]\n      }\n      rdataA\n    })\n\n    rdataG <- reactive( {\n      ##  It is \"reactive\" and therefore should be automatically\n      ##  re-executed when inputs change\n      rdataG <- rdataA()\n      if( length(input$grade) < length(choices.grade) ) {\n        ## Sélection active : certains grades ne sont pas sélectionnés.\n        rdataG <- rdataG[ rdataG$libdip1 %in% input$grade, ]\n      }\n      rdataG\n    })\n\n    rdataS <- reactive( {\n      ##  It is \"reactive\" and therefore should be automatically\n      ##  re-executed when inputs change\n      \n      rdataS <- rdataG()\n      if( length(input$sexe) < 2) {\n        ## Sélection active : un seul genre est sélectionné.\n        rdataS <- rdataS[ rdataS$sexe %in% input$sexe, ]\n      }\n      rdataS\n    })\n    \n    rdata <- reactive( {\n      ##  It is \"reactive\" and therefore should be automatically\n      ##  re-executed when inputs change\n      \n      rdata <- rdataS()\n      if(! is.null(input$diplome) ) {\n        logInd <- rdata$libdip2 %in% input$diplome | rdata$libdip3 %in% input$diplome | rdata$code_diplome %in% input$diplome\n        rdata <- rdata[logInd, ]\n      }\n      rdata\n    })\n\n    population <- reactive({\n      as.matrix(ftable(rdata()[, c(\"sexe\", \"boursier\")], exclude = NULL))\n    })\n\n    intituleEmploi <- reactive({\n      df <- rdata()\n      jobs <- as.character(df$q6_4 [ df$q6_4 != \"\"])\n      withProgress({\n        setProgress(message = \"Processing corpus...\")\n        getTermMatrix(jobs)\n      })\n    })    \n        \n    ## ##########################\n    ## Résultats de l'enquêtes\n    output$recapReponse <- renderTable( {\n      n <- nrow(rdata())\n      q <- sum(rdata()$repondant)\n      data.frame(\n        c(\"Nombre de diplômés (sauf VAE)\", \"Questionnaires exploités\", \"Taux de réponse\"),\n        c(n, q, sprintf(\"%.1f%%\", 100*q/n))\n      )\n    }, colnames = FALSE\n    )\n    \n    output$statutReponse <- renderTable({\n      table(rdata()[,\"statutReponse\"][drop=TRUE], useNA = \"ifany\", dnn= \"Réponse\")\n    })\n\n    ## Situation des diplomés\n    situationDiplomePlot <- reactive(\n    {\n      BarStackedPlot2(rdata(), \"situationProN30\", \"etudeN30\", \"Poursuite d'étude\") + ggtitle(\"Situation des diplômés à N + 30 mois\") + labs(x=\"Situation professionnelle\", y=\"Effectifs\")\n    })\n    \n    output$situationDiplome <- renderPlot({\n      if(nrow(rdata()) > 0) {\n        ## Avoid to run Before loading of UI and to cause Null parameters\n        situationDiplomePlot()\n      }\n    })\n\n   \n    ## ###############################################################\n    ## Caractéristiques socio-démographiques (ensemble des diplômés)\n    output$populationEffectifs <- renderTable(addmargins(population(), FUN = Total, quiet = TRUE), rownames = TRUE, digits = 0)\n    output$populationPourcents <- renderTable({\n      x <- population()\n      x <- 100*x /sum(x)\n      addmargins(x, FUN = Total, quiet = TRUE)\n    }, rownames = TRUE, digits = 1)\n\n\n    serieBacPlot <- reactive( {\n      BarStackedPlot2(rdata(), \"serieBac\", \"regionBac\", \"Région d'obtention du bac\") + ggtitle(\"Bac obtenu\") + labs(x=\"Bac obtenu\", y=\"Effectifs\")\n    })\n    \n\n  output$serieBac2 <- renderPlot(\n    if(nrow(rdata()) > 0) {\n      serieBacPlot()\n    }\n  )\n  output$serieBac <- renderPlot(\n      BarPlot(rdata()$serieBac) + ggtitle(\"Bac obtenu\") + labs(x=\"Bac obtenu\", y=\"Effectifs\") \n    )\n\n    output$regionBac <- renderPlot(\n      BarPlot(rdata()$regionBac) + ggtitle(\"Région d'obtention du bac\") + labs(x=\"Région d'obtention du bac\", y=\"Effectifs\") \n    )\n    \n\n    ## #####################\n    ## Diplômés en emploi\n\n    ## Diplômés en emploi \n    remploye <- reactive( {\n      rdata()[rdata()$employe, ] \n    })\n\n    output$nbEmploye <- renderText(paste(\"Il y a\", nrow(remploye()), \"répondants en emploi\"))\n    \n    output$salaireParSexe <- renderTable( {\n      x <- as.matrix(aggregate(remploye()$q6_9, list(remploye()$sexe), summary))\n      colnames(x) <- c( \"Sexe\", substring(colnames(x)[-1], 3))\n      x\n    })\n    \n    output$salaire <- renderPlot( {\n      salary <- as.numeric(remploye()$q6_9)\n      ggplot() + aes(salary) + geom_histogram(binwidth = 250,  fill = ptol_pal()(1)) + ggtitle(\"Niveau de rémunération (salaire mensuel net hors primes)\") +  theme_gdocs() + labs(x=\"Salaire\", y=\"Effectifs\")\n    })\n\n\n    output$regionEmploi <- renderPlot({\n      BarStackedPlot2(remploye(), \"regionEmploi\", \"regionBac\", \"Région d'obtention du bac\") +\n      labs(x=\"Région d'emploi\", y=\"Effectifs\") +\n      ggtitle(\"Localisation de l'emploi et mobilité des diplomés\")\n    })\n\n    niveauEmploiPlot <- reactive({\n      BarStackedPlot2(remploye(), \"statutEmploiN30\",\"niveauEmploiN30\", \"Niveau de l'emploi\") + ggtitle(\"Statut de l'emploi\") + labs(x=\"Niveau de l'emploi\", y=\"Effectifs\") \n    })\n\n    output$niveauEmploi2 <- renderPlot({\n      niveauEmploiPlot()\n    })\n    output$statutEmploi <- renderPlot({\n      BarPlot(remploye()$statutEmploiN30) + ggtitle(\"Statut de l'emploi\") + labs(x=\"Statut de l'emploi\", y=\"Effectifs\") \n    })\n    output$niveauEmploi <- renderPlot({\n        BarPlot(remploye()$niveauEmploiN30) + ggtitle(\"Niveau de l'emploi\") + labs(x=\"Niveau de l'emploi\", y=\"Effectifs\") \n    })\n\n    ## output$typeEmployeur <- renderPlot({\n    ##   BarPlot(remploye()$typeEmployeur) + ggtitle(\"Type d'employeur\") + labs(x=\"Type d'employeur\", y=\"Effectifs\") \n    ## })\n    output$typeEmployeur <- renderPlot({\n      BarStackedPlot2(remploye(), \"typeEmployeur\", \"effectifsEmployeur\", legend.title = \"Effectifs de l'employeur\") +\n        labs(x=\"Type d'employeur\", y=\"Effectifs\") +\n        ggtitle(\"Type d'employeur\")\n    })\n    output$activiteEcoEmployeur <- renderPlot({\n      BarPlot(remploye()$activiteEcoEmployeur) + ggtitle(\"Activité économique de l'entreprise\") + labs(x=\"Secteur d'activité\", y=\"Effectifs\") \n    })\n\n    ## #############################################\n    ## Generate job word cloud\n    ## http://shiny.rstudio.com/gallery/word-cloud.html\n    ## Make the wordcloud drawing predictable during a session\n    wordcloud_rep <- repeatable(wordcloud)\n    \n    output$nuageEmploi <- renderPlot({\n      v <- intituleEmploi()\n      wordcloud_rep(names(v), v, scale=c(4,0.5),\n                  min.freq = 2, max.words=100,\n                  colors=brewer.pal(8, \"Dark2\"))\n    })\n\n    ## #########################################################\n    ## Automatically stop a Shiny app when closing the browser tab\n    ## session$onSessionEnded(stopApp)\n    \n    ## #########################################\n    ## pass parameters to a shiny app via URL\n    ## http://stackoverflow.com/questions/32872222/how-do-you-pass-parameters-to-a-shiny-app-via-url\n    observe({\n      query <- parseQueryString(session$clientData$url_search)\n      \n      nameval = \"grade\"\n      valuetoupdate <- query[[nameval]]\n      if (!is.null(query[[nameval]])) {\n        valuetoupdate <- unlist(strsplit(valuetoupdate, \",\"))\n        updateCheckboxGroupInput(session, nameval, selected = valuetoupdate)\n      }\n\n      nameval = \"diplome\"\n      valuetoupdate <- query[[nameval]]\n      if (!is.null(query[[nameval]])) {\n        valuetoupdate <- unlist(strsplit(valuetoupdate, \",\"))\n        updateSelectizeInput(session, nameval, selected = valuetoupdate)\n      }\n      \n      nameval = \"sexe\"\n      valuetoupdate <- query[[nameval]]\n      if (!is.null(query[[nameval]])) {\n        valuetoupdate <- unlist(strsplit(valuetoupdate, \",\"))\n        updateCheckboxGroupInput(session, nameval, selected = valuetoupdate)\n      }\n    \n    })\n    \n    ## generate the URL for the current selection\n    url <- reactive({\n      ##url <- \"http://127.0.0.1:3141/?\"\n      url <- \"http://unicepro-ove.shinyapps.io/oveshinyip/?\"\n       if( length(input$grade) < length(levels(data$libdip1)) ) {\n         url <- paste0(\n           url, \"grade=\", \n           paste0(input$grade, collapse = \",\"), \"&\"\n         )\n       }\n      if(! is.null(input$diplome) ) {\n        url <- paste0(\n          url, \"diplome=\", \n          paste0(input$diplome, collapse = \",\"), \"&\"\n         )\n      }\n      if( length(input$sexe) < 2) {\n        url <- paste0(url,\"sexe=\",input$sexe,\"&\")\n      }\n      #3 remove last character: ? or &.\n      substring(url, 0, nchar(url)-1)\n    })\n    output$url <- renderText(url())\n    ## A reactive data source, based on the input$species\n    observeEvent(input$copyButton, {\n      clipr::write_clip(url())\n    })\n\n    \n    ## #################################\n    ## Generating downloadable reports\n    ## http://shiny.rstudio.com/articles/generating-reports.html\n     output$report <- downloadHandler(\n      # For PDF output, change this to \"report.pdf\"\n      filename = \"report.pdf\",\n      content = function(file) {\n        # Copy the report file to a temporary directory before processing it, in\n        # case we don't have write permissions to the current working dir (which\n        # can happen when deployed).\n        tempReport <- file.path(tempdir(), \"report.Rmd\")\n        file.copy(\"report.Rmd\", tempReport, overwrite = TRUE)\n\n        # Set up parameters to pass to Rmd document\n        params <- list(n = 10, situationDiplome = situationDiplomePlot)\n\n        # Knit the document, passing in the `params` list, and eval it in a\n        # child of the global environment (this isolates the code in the document\n        # from the code in this app).\n        rmarkdown::render(tempReport, output_file = file,\n          params = params,\n          envir = new.env(parent = globalenv())\n        )\n      }\n     )\n\n    ############################### TEAM STRANGE ############################### \n    \n    ## OUTPUT : pHFEmploi : Pourcentage des hommes et femmes possédant un emploi\n    output$pHFEmploi <- renderPlot({\n      plot <- ggplot(das, aes(x=das$sexe, y=ToHundredPercent(round(das$Freq,2)), fill=factor(das$situationEmploi)))+ geom_bar(stat = \"identity\", position=position_dodge()) + \n        geom_text(aes(label=ToHundredPercent(round(das$Freq,2)), y = ToHundredPercent(round(das$Freq,2))+2),position = position_dodge(0.9), size=3.5)+\n        labs(title=\"Pourcentage des hommes et femmes possédant un emploi\", x=\"Sexe\", y=\"Pourcentage\", fill=\"\")+\n        ylim(c(0,100))\n      plot\n    })\n    \n    ## OUTPUT : progressionCondEmploi : Progression des conditions d'emplois (en %)\n    output$progressionConditionEmploi <- renderPlot({\n      plot <- ggplot(dfPlot, aes(x=factor(dfPlot$date), y=dfPlot$y, fill=factor(dfPlot$fill)))+ \n        geom_bar(stat = \"identity\", position=position_dodge()) + \n        geom_text(aes(label = dfPlot$freq, y = dfPlot$y + 0.15),position = position_dodge(0.9), vjust = -1)+\n        labs(title=\"Progression des conditions d’emploi (en %)\", x=\"\", y=\"Pourcentage\", fill=\"\")+\n        ylim(c(0,100))\n      plot<- plot + theme_calc() + scale_color_calc()\n      plot\n    })\n    \n    ## data frame du tableau\n    dataDepartement <- reactive({\n      pourcentage18 <- c(\n        pourcentage(universite, insertion),\n        pourcentage(insertion, stable),\n        pourcentage(insertion, tempsPlein),\n        pourcentage(insertion, niveauEmploi),\n        pourcentage(insertion, subset(insertion, niveauEmploiN30 == \"ingénieur, cadre, professions libérales, professions intellectuelles supérieures\")),\n        pourcentage(insertion, subset(insertion, departements == input$Departement)),\n        median(as.numeric(tempsPlein$salaireMensuel), na.rm = TRUE),\n        median(salBrut, na.rm = TRUE)\n      )\n      pourcentage30 <- c(\n        pourcentage(universite, insertion2),\n        pourcentage(insertion2, stable2),\n        pourcentage(insertion2, tempsPlein2),\n        pourcentage(insertion2, niveauEmploi2),\n        pourcentage(insertion, subset(insertion2, niveauEmploiN18 == \"ingénieur, cadre, professions libérales, professions intellectuelles supérieures\")),\n        pourcentage(insertion2, subset(insertion2, insertion2$departement == input$Departement)),\n        median(as.numeric(tempsPlein2$salaireMensuel2014), na.rm = TRUE),\n        median(salBrut30, na.rm = TRUE)\n      )\n      df<-data.frame(\n        pourcentage18, \n        pourcentage30, \n        row.names = c(\n          \"Taux d'insertion\",\n          \"Part des emplois stable\", \n          \"Part des emplois a temps plein\", \n          \"Part des emplois de niveau cadre ou profession intermédiaire\", \n          \"Part des emplois de niveau cadre\", \n          \"Part des emplois en dehors de la région\", \n          \"Salaire Net Median des emplois à Temps Plein\", \n          \"Salaire brut annuel médian estimé\"))\n      colnames(df) <-c(\"18 mois\", \"30 mois\")\n      df\n    })\n\n    # TauxInsertionTable    \n    output$TauxInsertion <- renderPlot({\n      grid.table(dataDepartement())\n      })\n    \n      ## TODO rendre dfBoursier reactive par rapport aux départements???\n    output$bourseFaciliter <- renderPlot({\n      plotBourse <- ggplot(dfBoursier, aes(x=factor(dfBoursier$xLabel), y=dfBoursier$y, fill=factor(dfBoursier$fill)))+\n        geom_bar(stat = \"identity\", position = position_dodge()) +\n        geom_text(aes(label = dfBoursier$freq, y = dfBoursier$y + 0.15), position = position_dodge(0.9), vjust = -1) +\n        labs(title=\"La bourse faciliter\", x=\"\", y=\"Pourcentage\", fill=\"\")+\n        ylim(c(0,100))\n      plotBourse<- plotBourse + theme_calc() + scale_color_calc()\n      plotBourse\n    })\n    \n    ##\n    output$typeDiplomePossedantEmploi <- renderPlot({\n      plot<- ggplot(ne, aes(x=factor(x), y = y/sum(y)*100)) + geom_bar(stat=\"identity\")+\n        labs(title=\"Type de diplomes possédant un emploi (en %)\", x=\"\", y=\"Pourcentage\")+\n        ylim(c(0,100)) + theme_calc() + scale_color_calc()\n      plot\n    })\n    \n    ## Évolution de la Poursuite d'études\n    output$evolutionPoursuiteEtude <- renderPlot({\n      plotPoursuite<- ggplot(poursuiteDF, aes(x=factor(labelX), y = b, fill = c)) + geom_bar(stat=\"identity\", position = position_dodge())+\n        labs(title=\"Evolution de la poursuite d'étude (en %)\", x=\"\", y=\"Pourcentage\", fill=\"Par année\")+\n        geom_text(aes(label = poursuiteDF$labelY, y = b + 0.15),position = position_dodge(0.9), vjust = -1)+\n        ylim(c(0,100)) + theme_calc() + scale_color_calc()\n      plotPoursuite\n    })\n    \n    ## Possède un emplois à 18 mois\n    output$possedeEmploisDixHuitsMois <- renderPlot({\n      population <- length(universiteToPlot$insertionDixHuitsMois)\n      plotInsertion<-ggplot(universiteToPlot, aes(x=universiteToPlot$insertionDixHuitsMois, fill=universiteToPlot$sexe)) \n      plotInsertion<- plotInsertion + geom_bar() \n      plotInsertion<- plotInsertion + xlab(\"\") \n      plotInsertion<- plotInsertion + ylab(\"Total\") \n      plotInsertion<- plotInsertion + ylim(c(0, DATA_SIZE))\n      plotInsertion<- plotInsertion + ggtitle(sprintf(\"Possède un emplois à 18 mois. Population est de %d personnes\", population)) \n      plotInsertion<- plotInsertion + scale_fill_discrete(name = \"\")\n      plotInsertion<- plotInsertion + theme_minimal()\n      plotInsertion\n    })\n    ## Possède un emplois à 30 mois\n    output$possedeEmploisTrenteMois <- renderPlot({\n      population <- length(universiteToPlotTrenteMois$insertionTrenteMois)\n      plotInsertion2<-ggplot(universiteToPlotTrenteMois, aes(x=universiteToPlotTrenteMois$insertionTrenteMois, fill=universiteToPlotTrenteMois$sexe)) \n      plotInsertion2<- plotInsertion2 + geom_bar(position=position_dodge()) \n      plotInsertion2<- plotInsertion2 + xlab(\"\") \n      plotInsertion2<- plotInsertion2 + ylab(\"Total\") \n      plotInsertion2<- plotInsertion2 + ylim(c(0,DATA_SIZE))\n      plotInsertion2<- plotInsertion2 + ggtitle(sprintf(\"Possède un emploi à 30 mois. Population = %d personnes\", population)) \n      plotInsertion2<- plotInsertion2 + scale_fill_discrete(name = \"\")\n      plotInsertion2<- plotInsertion2 + theme_minimal()\n      plotInsertion2\n    })\n    \n    ## Lieu de l'emploi\n    output$lieuDeLemploi <- renderPlot({\n      plot <- ggplot(lieuEmplois, aes(x=x, y = lieuEmplois$y, fill=x))+ \n        geom_bar(stat = \"identity\", position=position_dodge()) + \n        geom_text(aes(label = round(y,2), y = lieuEmplois$y + 0.15),position = position_dodge(0.9), vjust = -1)+\n        labs(title=\"Lieu d'emplois (en %)\", x=\"\", y=\"Pourcentage\", fill=\"\")+\n        ylim(c(0,100))\n      plot<- plot + theme_calc() + scale_color_calc()\n      plot\n    })\n  }\n)",
    "created" : 1497976063005.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2553312238",
    "id" : "C652093B",
    "lastKnownWriteTime" : 1497976025,
    "last_content_update" : 1497976025,
    "path" : "~/Documents/M1/ter-ove-2017/oveShinyIP/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}